// Name: SPTrackingHelper V2
// Version: 2.0.0
// License: MIT
// Description: Calculate the position of the sun and several planets within their current constellation bounds.

// READ THIS
// the following variables are some visual configurations you can make.
// Once you make changes, you need to re-run the script. Use ctrl-s to save the file, thereby saving changes for next time.

const POS_COLOR = "#ffaa00"; // color of the representation of object pos within the constellation
const OBJ_COLOR = "#ffffff"; // color of the object's name
const CON_COLOR = "#ffffff"; // color of the constellation name
const B = "┃"                // Boundary character between each quarter of the constellation
const S = " "                // Spacer character in between borders
const OBJECT_CHAR = "●";     // Character representing the object (planet or the Sun)
const globalXOffset = 0;     // x-offset of all labels drawn by this script

// IAU Abbreviations
var iauNames = {
  "Ari": "Aries",
  "Tau": "Taurus",
  "Gem": "Gemini",
  "Cnc": "Cancer",
  "Leo": "Leo",
  "Vir": "Virgo",
  "Lib": "Libra",
  "Sco": "Scorpius",
  "Sgr": "Sagittarius",
  "Cap": "Capricornus",
  "Aqr": "Aquarius",
  "Psc": "Pisces",
  "Oph": "Ophiuchus"
};

// Constellation bounds (RA/Dec)
var boundsRaDec = {
  "Psc": [[27, 11.15], [352.55, -3.21]],
  "Ari": [[51.4, 18.73], [27, 11.15]],
  "Tau": [[90.5, 23.43], [51.4, 18.73]],
  "Gem": [[120.45, 20.51], [90.5, 23.43]],
  "Cnc": [[140.81, 15.33], [120.45, 20.51]],
  "Leo": [[174.7, 2.3], [140.81, 15.33]],
  "Vir": [[215.8, -14.2], [174.7, 2.3]],
  "Lib": [[239.4, -20.45], [215.8, -14.2]],
  "Sco": [[246.2, -21.63], [239.4, -20.45]],
  "Oph": [[266.3, -23.39], [246.2, -21.63]],
  "Sgr": [[302.2, -20.15], [266.3, -23.39]],
  "Cap": [[330.05, -12.19], [302.2, -20.15]],
  "Aqr": [[354.75, -3.21], [330.05, -12.19]]
};

// UI Class
function UIHandler(startPos) {
  this.labelPos = startPos || 0;
  LabelMgr.deleteAllLabels();
  HighlightMgr.cleanHighlightList();
}
UIHandler.prototype.basicLabel = function (text, xOffset, textSize, textColor) {
  LabelMgr.labelScreen(text, 300 + xOffset, this.labelPos, true, textSize, textColor);
  this.labelPos += textSize + 5;
}
UIHandler.prototype.ASCIILabel = function (posInt) {
  var BASE_ASCII = [B, S, S, S, S, S, S, S, B, S, S, S, S, S, S, S, B, S, S, S, S, S, S, S, B, S, S, S, S, S, S, S, B];
  var ascii = [...BASE_ASCII];
  if (posInt < 0) { posInt = 0; }
  else if (posInt > 32) { posInt = 32; }
  ascii[posInt] = OBJECT_CHAR;
  return ascii.join('');
}

// Conversion Class
function Conversions() { return; }
Conversions.prototype.degToRad = function (deg) {
  return deg * (Math.PI / 180);
}
Conversions.prototype.radToDeg = function (rad) {
  return rad * (180 / Math.PI);
}
Conversions.prototype.degToHMS = function (deg) {
  var totalHours = deg / 15.0;
  var hours = Math.floor(totalHours);
  var totalMinutes = (totalHours - hours) * 60;
  var minutes = Math.floor(totalMinutes);
  var seconds = Math.floor((totalMinutes - minutes) * 60);
  return hours + "h" + minutes + "m" + seconds + "s";
}

// Calculation Class
function Calculations(usePosExceptions) {
  this.posExc = usePosExceptions || true;
}
Calculations.prototype.haversine = function (a1, d1, a2, d2) {
  const alpha1 = conv.degToRad(a1);
  const delta1 = conv.degToRad(d1);
  const alpha2 = conv.degToRad(a2);
  const delta2 = conv.degToRad(d2);

  const sinSqd = (x) => Math.sin(x) ** 2;

  const deltaDiff = delta2 - delta1;
  const alphaDiff = alpha2 - alpha1;

  const theta = 2 * Math.asin(
    Math.sqrt(
      sinSqd(deltaDiff / 2) +
      Math.cos(delta1) * Math.cos(delta2) * sinSqd(alphaDiff / 2)
    )
  );

  return theta;
}

// Initialize helpers
const ui = new UIHandler(globalXOffset);
const conv = new Conversions();
const calc = new Calculations(false);

// === Sun Position + Info ===
const sun = core.selectObjectByName("Sun", false);
const sunInfo = core.getSelectedObjectInfo(sun);

// Label: Sun name
ui.basicLabel(sunInfo.name, 0, 20, OBJ_COLOR);

// Label: Constellation name
const sunAbbr = sunInfo.iauConstellation;
const sunConName = iauNames[sunAbbr] || sunAbbr;
ui.basicLabel(sunConName, 20, 18, CON_COLOR);

// Label: ASCII position in constellation
const sunBounds = boundsRaDec[sunAbbr];
if (sunBounds) {
  const [[ra1, dec1], [ra2, dec2]] = sunBounds;
  const totalDist = calc.haversine(ra1, dec1, ra2, dec2);
  const objDist = calc.haversine(ra1, dec1, sunInfo.ra, sunInfo.dec);
  const sunRelPos = Math.round((objDist / totalDist) * 31);
  const sunAscii = ui.ASCIILabel(sunRelPos);
  ui.basicLabel(sunAscii, 0, 16, POS_COLOR);
} else {
  ui.basicLabel("(No bounds)", 0, 16, "#888888");
}

// Sun rise/set time and daylight duration
const sunRise = sunInfo.rise;
const sunSet = sunInfo.set;

function formatTime(t) {
  const h = Math.floor(t);
  const m = Math.floor((t - h) * 60);
  return h + "h" + (m < 10 ? "0" : "") + m + "m";
}

const riseStr = "Rise: " + formatTime(sunRise);
const setStr = "Set: " + formatTime(sunSet);
const dur = sunSet - sunRise;
const durH = Math.floor(dur);
const durM = Math.round((dur - durH) * 60);
const durStr = "Daytime: " + durH + "h" + (durM < 10 ? "0" : "") + durM + "m";

ui.basicLabel(riseStr, 10, 16, CON_COLOR);
ui.basicLabel(setStr, 10, 16, CON_COLOR);
ui.basicLabel(durStr, 10, 16, CON_COLOR);


// Loop through planets
const planets = ["Mercury", "Venus", "Mars", "Jupiter", "Saturn"];
for (var i = 0; i < planets.length; i++) {
  var object = planets[i];
  const sel = core.selectObjectByName(object, false);
  const info = core.getSelectedObjectInfo(sel);

  ui.basicLabel(info.name, 0, 20, OBJ_COLOR);

  const abbr = info.iauConstellation;
  const conName = iauNames[abbr] || abbr;
  ui.basicLabel(conName, 10, 18, CON_COLOR);

  const bounds = boundsRaDec[abbr];
  if (!bounds) {
    ui.basicLabel("(No bounds)", 40, 16, "#ff0000");
    continue;
  }

  const [[ra1, dec1], [ra2, dec2]] = bounds;
  const objRa = info.ra;
  const objDec = info.dec;

  // Calculate total angular size of constellation area
  const totalDist = calc.haversine(ra1, dec1, ra2, dec2);

  // Calculate distance of object from lower bound
  const objDist = calc.haversine(ra1, dec1, objRa, objDec);

  // Normalize position to a 0–32 range for ASCII label
  let relPos = Math.round((objDist / totalDist) * 31);

  // Display ASCII bar
  const asciiBar = ui.ASCIILabel(relPos);
  ui.basicLabel(asciiBar, 0, 16, POS_COLOR);
}




// DEBUG: calc.haversine test cases

// Psc E to Psc W
//core.debug(calc.haversine(27,11.15,352.55, -3.21))
