
// cleanup
LabelMgr.deleteAllLabels();
HighlightMgr.cleanHighlightList();

var labelcounter = 200;  //counter for label spacing
function label(text, x_offset, size, color) {
    LabelMgr.labelScreen(text, 300 + x_offset, labelcounter, true, size, color);
    labelcounter += 20;
}

// constants
var POS_COLOR = "#ffaa00"
var OBJ_COLOR = "#ffffff"
var CON_COLOR = "#ffffff"
var B = "|"; //boundary char
var S = " "; //spacer char
var OBJECT_CHAR = "●"

//  base ascii array
var BASE_ASCII = [B,S,S,S,S,S,S,S,B,S,S,S,S,S,S,S,B,S,S,S,S,S,S,S,B,S,S,S,S,S,S,S,B]

// abbreviation definitions
var iauNames = {
  "Ari": "Aries",
  "Tau": "Taurus",
  "Gem": "Gemini",
  "Cnc": "Cancer",
  "Leo": "Leo",
  "Vir": "Virgo",
  "Lib": "Libra",
  "Sco": "Scorpius",
  "Sgr": "Sagittarius",
  "Cap": "Capricornus",
  "Aqr": "Aquarius",
  "Psc": "Pisces",
  "Oph": "Ophiuchus"
};

// constellation bounds (RA/Dec) as decimal
// "abbr": [ [ra1, dec1], [ra2, dec2] ]
var boundsRaDec = {
  "Psc": [
    [27, 11.15],
    [352.55, -3.21]
  ],
  "Ari": [
    [51.4, 18.73],
    [27, 11.15]
  ],
  "Tau": [
    [90.5, 23.430],
    [51.4, 18.73]
  ],
  "Gem": [
    [120.45, 20.51],
    [90.5, 23.430]
  ],
  "Cnc": [
    [140.81, 15.33],
    [120.45, 20.51] 
  ],
  "Leo": [
    [174.7, 2.3],
    [140.81, 15.33]
  ],
  "Vir": [
    [215.8, -14.2],
    [174.7, 2.3]
  ],
  "Lib": [
    [239.4, -20.45],
    [215.8, -14.2]
  ],
  "Sco": [
    [246.2, -21.63],
    [239.4, -20.45]
  ],
  "Oph": [
    [266.3, -23.39],
    [246.2, -21.63]
  ],
  "Sgr": [
    [302.2, -20.15],
    [266.3, -23.39]
  ],
  "Cap": [
    [330.05, -12.19],
    [302.2, -20.15]
  ],
  "Aqr": [
    [354.75, -3.21], // offset slightly because of a weird stupid bug that im too tired to go fix (TODO: go fix)
    [330.05, -12.19]
  ]
};

// calculate integer position
function mapObjectPosition(bounds, objectPos) {
    // deg -> rad helper function
    const toRadians = function(degrees) {
        return degrees * Math.PI / 180;
    };
    
    // all to radians
    const ra1 = toRadians(bounds[0][0]);
    const dec1 = toRadians(bounds[0][1]);
    const ra2 = toRadians(bounds[1][0]);
    const dec2 = toRadians(bounds[1][1]);
    const raObj = toRadians(objectPos[0]);
    const decObj = toRadians(objectPos[1]);
    
    // angular distance (theta) from first bound to object position
    const cosTheta1 = Math.sin(dec1) * Math.sin(decObj) + 
                      Math.cos(dec1) * Math.cos(decObj) * Math.cos(raObj - ra1);
    const theta1 = Math.acos(Math.max(-1, Math.min(1, cosTheta1))); // Clamp to avoid floating point bs
    
    // angular distance (theta) from object position to second bound
    const cosTheta2 = Math.sin(decObj) * Math.sin(dec2) + 
                      Math.cos(decObj) * Math.cos(dec2) * Math.cos(ra2 - raObj);
    const theta2 = Math.acos(Math.max(-1, Math.min(1, cosTheta2))); // Clamp to avoid floating point bs
    
    // angular distance (theta) between bounds
    const cosTotal = Math.sin(dec1) * Math.sin(dec2) + 
                     Math.cos(dec1) * Math.cos(dec2) * Math.cos(ra2 - ra1);
    const thetaTotal = Math.acos(Math.max(-1, Math.min(1, cosTotal))); // Clamp to avoid floating point bs
    
    // proportional distance
    const proportion = theta1 / thetaTotal;
    
    // map to 32-pt scale
    return Math.round(proportion * 32);
}

function getAscii(posInt) {
    var ascii = [...BASE_ASCII]; 
    if (posInt < 0) { posInt = 0; } 
    else if (posInt > 32) { posInt = 32; }
    ascii[posInt] = OBJECT_CHAR;
    return ascii.join(''); 
}
function parseTime(timeStr) {
    const match = timeStr.match(/(\d+)h(\d+)m/);
    const hours = parseInt(match[1], 10);
    const minutes = parseInt(match[2], 10);
    return hours * 60 + minutes; 
}
function formatTime(minutes) {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return `${hours}h${mins}m`;
}
function calculateDayLength(riseTime, setTime) {
    const riseMinutes = parseTime(riseTime);
    const setMinutes = parseTime(setTime);
    const dayLengthMinutes = setMinutes - riseMinutes;
    return formatTime(dayLengthMinutes);
}
// sun labels

var sun = core.selectObjectByName("Sun", false)
	var sunInfo = core.getSelectedObjectInfo(sun)
	label(sunInfo.name, 0, 20, OBJ_COLOR)
	label("Rise: " + sunInfo.rise, 20, 18, OBJ_COLOR);
	label("Set: " + sunInfo.set, 20, 18, OBJ_COLOR);
	label("Day: " + calculateDayLength(sunInfo.rise, sunInfo.set), 20, 18, OBJ_COLOR);
	var sunConName = iauNames[sunInfo.iauConstellation]
	label(sunConName, 20, 18, CON_COLOR)
	var sunConBounds = boundsRaDec[sunInfo.iauConstellation]
	var sunPos = [sunInfo.ra, sunInfo.dec]
	var sunPosInt = mapObjectPosition(sunConBounds, sunPos)
	label(getAscii(sunPosInt), 20, 18, POS_COLOR)

// planet labels
var planets = ["Mercury", "Venus", "Mars", "Jupiter", "Saturn"] 
for (var i = 0; i < planets.length; i++) {
	var item = planets[i];
	if (planets.indexOf(item)> -1 ) {
		var sel = core.selectObjectByName(item, false)
		var info = core.getSelectedObjectInfo(sel)
		label(info.name, 0, 20, OBJ_COLOR)
		var conName = iauNames[info.iauConstellation]
		label(conName, 20, 18, CON_COLOR)
		var conBounds = boundsRaDec[info.iauConstellation]
		var objectPos = [info.ra, info.dec]
		var posInt = mapObjectPosition(conBounds, objectPos)
		label(getAscii(posInt), 20, 18, POS_COLOR)
	}
}



// coordinate conversion functions
function degToHMS(deg) {
  var totalHours = deg / 15.0;
  var hours = Math.floor(totalHours);
  var totalMinutes = (totalHours - hours) * 60;
  var minutes = Math.floor(totalMinutes);
  var seconds = Math.floor((totalMinutes - minutes) * 60);
  return hours + "h" + minutes + "m" + seconds + "s";
}
function degToDMS(deg) {
  var sign = (deg >= 0) ? "+" : "-";
  deg = Math.abs(deg);
  var degrees = Math.floor(deg);
  var totalMinutes = (deg - degrees) * 60;
  var minutes = Math.floor(totalMinutes);
  var seconds = Math.floor((totalMinutes - minutes) * 60);
  return sign + degrees + "d" + minutes + "m" + seconds + "s";
}

// DEBUG: highlights on boundaries
function highlightBounds(radec) {
for (var key in radec) {
    if (radec.hasOwnProperty(key)) {
        var coordsPair = radec[key];
        var coords1 = coordsPair[0];
        var raDeg1 = coords1[0];
        var decDeg1 = coords1[1];
        if (raDeg1 < 0) {
            raDeg1 += 360;
        }
        var raStr1 = degToHMS(raDeg1);
        var decStr1 = degToDMS(decDeg1);
        HighlightMgr.addPointRaDec(raStr1, decStr1);

        var coords2 = coordsPair[1];
        var raDeg2 = coords2[0];
        var decDeg2 = coords2[1];
        if (raDeg2 < 0) {
            raDeg2 += 360;
        }
        var raStr2 = degToHMS(raDeg2);
        var decStr2 = degToDMS(decDeg2);
        HighlightMgr.addPointRaDec(raStr2, decStr2);
    }
}
}
highlightBounds(boundsRaDec)






